# Generated by Django 5.2.6 on 2025-10-06 12:53

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this ballot', primary_key=True, serialize=False)),
                ('is_calculated', models.BooleanField(default=False, help_text='True if calculated by delegation system, False if manually cast')),
                ('is_anonymous', models.BooleanField(default=True, help_text='Whether this ballot should be kept anonymous')),
                ('hashed_username', models.CharField(help_text="One-way hash of the voter's username for verification", max_length=64)),
                ('tags', models.CharField(blank=True, help_text="Comma-separated tags this voter applied to characterize this decision (e.g., 'environmental,fiscal')", max_length=500, null=True)),
                ('comments', models.TextField(blank=True, help_text='Optional explanation of voting reasoning or context')),
            ],
            options={
                'ordering': ['decision__title', 'voter__username'],
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('title', models.CharField(help_text='Short, descriptive name for this choice', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this choice represents')),
                ('score', models.DecimalField(blank=True, decimal_places=4, default=0.0, help_text='Average star score from all votes (0.0000-5.0000)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('runoff_score', models.DecimalField(blank=True, decimal_places=4, default=0.0, help_text='Score in the automatic runoff phase of STAR voting', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
            ],
            options={
                'ordering': ['decision__title', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('name', models.CharField(help_text='Display name of the community', max_length=255)),
                ('description', models.TextField(help_text="Detailed description of the community's purpose and scope")),
                ('auto_approve_applications', models.BooleanField(default=False, help_text='Automatically approve membership applications (demo mode)')),
                ('member_count_display', models.BooleanField(default=True, help_text='Show member count publicly on community pages')),
                ('application_message_required', models.BooleanField(default=False, help_text='Require application message from users when applying')),
            ],
            options={
                'verbose_name_plural': 'Communities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('title', models.CharField(help_text='Short, descriptive title of the decision', max_length=255)),
                ('description', models.TextField(help_text="Detailed description of what's being decided, including context and implications")),
                ('dt_close', models.DateTimeField(help_text='When voting closes and results are finalized (no more votes accepted)')),
                ('results_need_updating', models.BooleanField(default=True, help_text='Whether results need recalculation (set when new votes are cast)')),
            ],
            options={
                'ordering': ['-dt_close', 'title'],
            },
        ),
        migrations.CreateModel(
            name='DecisionSnapshot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this snapshot was calculated')),
                ('snapshot_data', models.JSONField(blank=True, default=dict, help_text='Complete system state and calculation results at snapshot time')),
                ('calculation_duration', models.DurationField(blank=True, help_text='How long the calculation took to complete', null=True)),
                ('total_eligible_voters', models.IntegerField(default=0, help_text='Number of voting community members at snapshot time')),
                ('total_votes_cast', models.IntegerField(default=0, help_text='Number of direct votes submitted by users')),
                ('total_calculated_votes', models.IntegerField(default=0, help_text='Number of votes calculated via delegation chains')),
                ('tags_used', models.JSONField(blank=True, default=list, help_text='All tags used in voting with frequency counts')),
                ('is_final', models.BooleanField(default=False, help_text='True when decision is closed and results are final')),
                ('calculation_status', models.CharField(choices=[('creating', 'Creating Snapshot'), ('ready', 'Ready for Calculation'), ('staging', 'Stage Ballots in Progress'), ('tallying', 'Tally in Progress'), ('completed', 'Calculation Completed'), ('failed_snapshot', 'Snapshot Creation Failed'), ('failed_staging', 'Stage Ballots Failed'), ('failed_tallying', 'Tally Failed'), ('corrupted', 'Snapshot Corrupted')], default='ready', help_text='Current status of the calculation process', max_length=20)),
                ('error_log', models.TextField(blank=True, help_text='Detailed error information if calculation failed')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts for failed calculations')),
                ('last_error', models.DateTimeField(blank=True, help_text='When the last error occurred during calculation', null=True)),
            ],
            options={
                'verbose_name': 'Decision Snapshot',
                'verbose_name_plural': 'Decision Snapshots',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('is_anonymous_by_default', models.BooleanField(default=True, help_text='Whether this member prefers anonymous voting by default')),
                ('is_community_manager', models.BooleanField(default=False, help_text='Whether this member can manage community membership and settings')),
                ('is_voting_community_member', models.BooleanField(default=False, help_text="Whether this member's votes count (vs. being just a lobbyist)")),
                ('dt_joined', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this member joined the community')),
            ],
            options={
                'verbose_name': 'Community Membership',
                'verbose_name_plural': 'Community Memberships',
                'ordering': ['community__name', 'member__username'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('report', models.TextField(help_text='Human-readable summary of the voting results and winner')),
                ('stats', models.JSONField(help_text='Detailed statistics including vote counts, averages, delegation chains, and audit data')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this vote', primary_key=True, serialize=False)),
                ('stars', models.DecimalField(decimal_places=2, default=0, help_text='Star rating from 0.00 (worst) to 5.00 (best) for this choice - supports fractional ratings from delegation averaging', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'ordering': ['choice'],
            },
        ),
    ]
