# Generated by Django 5.2.6 on 2025-09-06 02:33

import django.core.validators
import django.db.models.deletion
import taggit.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Communities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('dt_close', models.DateTimeField(help_text='DateTime this Decision closes, no longer tallied, and no longer allowing votes.')),
                ('results_need_updating', models.BooleanField(default=True, help_text='The Decision was just published, or someone voted, and tally() needs to run.')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='decisions', to='democracy.community')),
            ],
            options={
                'ordering': ['-dt_close', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('score', models.DecimalField(blank=True, decimal_places=4, help_text='Average number of Stars', max_digits=5, null=True)),
                ('runoff_score', models.DecimalField(blank=True, decimal_places=4, help_text='Runoff score for STAR voting', max_digits=5, null=True)),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='choices', to='democracy.decision')),
            ],
            options={
                'ordering': ['decision__title', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('is_anonymous_by_default', models.BooleanField(default=True, help_text="Members' ballots are anonymous by default.")),
                ('is_community_manager', models.BooleanField(default=False, help_text='Can manage Community membership.')),
                ('is_voting_community_member', models.BooleanField(default=False, help_text='Can vote (not just a lobbyist.)')),
                ('dt_joined', models.DateTimeField(auto_now_add=True, help_text='DateTime member joined this community')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to='democracy.community')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Membership',
                'verbose_name_plural': 'Community Memberships',
                'ordering': ['community__name', 'member__username'],
            },
        ),
        migrations.AddField(
            model_name='community',
            name='members',
            field=models.ManyToManyField(through='democracy.Membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('report', models.TextField(help_text='User-friendly presentation of the results')),
                ('stats', models.JSONField(help_text='Detailed statistics and calculation data')),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='results', to='democracy.decision')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_calculated', models.BooleanField(default=False, help_text='False by default, or when manually cast - True, if calculated by the system.')),
                ('is_anonymous', models.BooleanField(default=True, help_text='Defaults to Membership.is_anonymous_by_default')),
                ('comments', models.TextField(blank=True, help_text='Any additional context the voter might like to share behind their vote.')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ballots', to=settings.AUTH_USER_MODEL)),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ballots', to='democracy.decision')),
                ('tags', taggit.managers.TaggableManager(help_text='Tags that characterize this ballot for delegation purposes', through='democracy.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['decision__title', 'voter__username'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stars', models.PositiveSmallIntegerField(default=0, help_text='Score Then Automatic Runoff (0-5 stars)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('ballot', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='votes', to='democracy.ballot')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='votes', to='democracy.choice')),
            ],
            options={
                'ordering': ['choice'],
            },
        ),
    ]
