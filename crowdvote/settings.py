"""
Django settings for crowdvote project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False)  # Default to False for production safety
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-q^8ify5*n5rsh3e4rkcx@amd58zuj*2b3bdenaqa$uj@94fjwj')

# Anonymity salt for hashing usernames in anonymous votes
ANONYMITY_SALT = env('ANONYMITY_SALT', default='development-salt-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1', 'testserver', '.railway.app', 'crowdvote.com', 'www.crowdvote.com'])

CSRF_TRUSTED_ORIGINS = [
    'https://www.crowdvote.com',
    'https://crowdvote.com',
    'https://*.railway.app',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    
    # Third-party apps
    'allauth',
    'allauth.account',
    'taggit',
    'django_htmx',
    
    # CrowdVote apps
    'accounts',
    'democracy',
]

# Add development apps when in DEBUG mode (but not during testing)
import sys
TESTING = 'pytest' in sys.modules or 'test' in sys.argv

if DEBUG and not TESTING:
    INSTALLED_APPS += [
        'debug_toolbar',
        'django_extensions',
    ]

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# Allauth settings for magic link authentication
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False  # We'll generate usernames during onboarding
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Don't require verification for magic links
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = False  # We'll use custom magic links
ACCOUNT_LOGIN_BY_CODE_ENABLED = False  # Disable codes, use links
ACCOUNT_PREVENT_ENUMERATION = False  # Allow magic links for unknown emails
ACCOUNT_RATE_LIMITS = {
    'login_failed': '3/5m',  # 3 attempts per 5 minutes
}
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_ADAPTER = 'accounts.adapters.CrowdVoteAccountAdapter'

# Redirect URLs
LOGIN_REDIRECT_URL = '/profile/profile/setup/'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/profile/profile/setup/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for allauth
    'django_htmx.middleware.HtmxMiddleware',  # HTMX middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add Debug Toolbar middleware when in DEBUG mode (but not during testing)
if DEBUG and not TESTING:
    MIDDLEWARE.insert(1, 'debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'crowdvote.urls'

ADMIN_URL = env('ADMIN_URL', default='zanzibar')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'crowdvote', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crowdvote.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Set default values for the environment variables if they're not already set
os.environ.setdefault("PGDATABASE", "crowdvote_dev")
os.environ.setdefault("PGUSER", env.str('USER', default='jasonblum'))
os.environ.setdefault("PGPASSWORD", "")
os.environ.setdefault("PGHOST", "localhost")
os.environ.setdefault("PGPORT", "5432")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["PGDATABASE"],
        'USER': os.environ["PGUSER"],
        'PASSWORD': os.environ["PGPASSWORD"],
        'HOST': os.environ["PGHOST"],
        'PORT': os.environ["PGPORT"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Email Configuration
if DEBUG:
    # Development: Use SendPulse for testing
    EMAIL_BACKEND = 'accounts.sendpulse_backend.SendPulseEmailBackend'
    DEFAULT_FROM_EMAIL = 'noreply@crowdvote.com'
else:
    # Production: Use SendPulse API
    EMAIL_BACKEND = 'accounts.sendpulse_backend.SendPulseEmailBackend'
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@crowdvote.com')

# SendPulse API Configuration
SENDPULSE_API_ID = env('SENDPULSE_API_ID', default='3de6104f5d90ad065edd6c95f3a9f47d')
SENDPULSE_API_SECRET = env('SENDPULSE_API_SECRET', default='433d2202a83be0eb43b03b591638f8db')

# Magic Link Rate Limiting Configuration
MAGIC_LINK_RATE_LIMIT_PER_HOUR = 12  # Allow up to 12 requests per hour (every 5 minutes)
MAGIC_LINK_MIN_INTERVAL_MINUTES = 5   # Minimum 5 minutes between requests

# Site Domain Configuration for Magic Links
# This ensures magic links work correctly in production
SITE_DOMAIN = 'crowdvote.com' if not DEBUG else 'localhost:8000'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'crowdvote_events': {
            'format': '[{asctime}] [{levelname}] {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'crowdvote_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/crowdvote.log',
            'when': 'midnight',  # Rotate daily at midnight
            'interval': 1,  # Every 1 day
            'backupCount': 30,  # Keep 30 days of logs
            'formatter': 'crowdvote_events',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'accounts': {
            'handlers': ['console', 'crowdvote_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'democracy': {
            'handlers': ['console', 'crowdvote_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'democracy.signals': {
            'handlers': ['console', 'crowdvote_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'democracy.services': {
            'handlers': ['console', 'crowdvote_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Django Debug Toolbar Configuration
if DEBUG and not TESTING:
    import socket
    
    # Get the hostname for Docker compatibility
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]
    
    # Debug Toolbar Settings
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
        'SHOW_COLLAPSED': True,
    }
    
    # Debug Toolbar Panels
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]
