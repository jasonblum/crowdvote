# Generated by Django 5.2.6 on 2025-10-06 12:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('democracy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, help_text='Brief biography to help other members understand your background and expertise', max_length=1000)),
                ('location', models.CharField(blank=True, help_text="Your city, state/province, country (e.g., 'San Francisco, CA, USA')", max_length=100)),
                ('website_url', models.URLField(blank=True, help_text='Your personal website, blog, or professional page')),
                ('twitter_url', models.URLField(blank=True, help_text='Your Twitter/X profile URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='Your LinkedIn profile URL')),
                ('bio_public', models.BooleanField(default=True, help_text='Whether your biography is visible to other community members')),
                ('location_public', models.BooleanField(default=True, help_text='Whether your location is visible to other community members')),
                ('social_links_public', models.BooleanField(default=True, help_text='Whether your social media links are visible to other community members')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MagicLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('email', models.EmailField(help_text='Email address this magic link was sent to', max_length=254)),
                ('token', models.CharField(help_text='Secure random token for the magic link URL', max_length=64, unique=True)),
                ('expires_at', models.DateTimeField(help_text='When this magic link expires and becomes invalid')),
                ('used_at', models.DateTimeField(blank=True, help_text='When this magic link was successfully used (null if unused)', null=True)),
                ('created_user', models.ForeignKey(blank=True, help_text='User account that was created using this magic link', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Magic Link',
                'verbose_name_plural': 'Magic Links',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='CommunityApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last modified')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn by User')], default='pending', help_text='Current status of the membership application', max_length=20)),
                ('application_message', models.TextField(blank=True, help_text='Optional message from the user explaining why they want to join')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the application was reviewed', null=True)),
                ('reviewer_notes', models.TextField(blank=True, help_text='Optional notes from the reviewer about their decision')),
                ('community', models.ForeignKey(help_text='The community the user wants to join', on_delete=django.db.models.deletion.CASCADE, related_name='membership_applications', to='democracy.community')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Community manager who reviewed this application', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user applying for community membership', on_delete=django.db.models.deletion.CASCADE, related_name='community_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Application',
                'verbose_name_plural': 'Community Applications',
                'ordering': ['-created'],
                'unique_together': {('user', 'community')},
            },
        ),
    ]
