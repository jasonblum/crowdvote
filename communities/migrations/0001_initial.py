# Generated by Django 4.0.4 on 2022-05-14 09:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('calculated', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_winning_candidate', models.BooleanField(default=False)),
                ('stars', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Communities',
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('stars', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('ballot', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='votes', to='communities.ballot')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='votes', to='communities.candidate')),
            ],
            options={
                'ordering': ['candidate'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=False, help_text='Members are anonymous by default.')),
                ('is_community_legislator', models.BooleanField(default=False, help_text='Can publish Ballots.')),
                ('is_community_administrator', models.BooleanField(default=False, help_text='Can manage Community membership.')),
                ('is_voting_community_member', models.BooleanField(default=False, help_text='Can vote (not just a lobbyist.)')),
                ('datetime_joined', models.DateTimeField(auto_now_add=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to='communities.community')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_updated', models.DateTimeField(auto_now=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('datetime_close', models.DateTimeField()),
                ('ballot_tree', models.TextField()),
                ('tally_report', models.TextField()),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='elections', to='communities.community')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='community',
            name='members',
            field=models.ManyToManyField(through='communities.Membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='candidate',
            name='election',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidates', to='communities.election'),
        ),
        migrations.AddField(
            model_name='ballot',
            name='election',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ballots', to='communities.election'),
        ),
        migrations.AddField(
            model_name='ballot',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='ballot',
            name='voter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ballots', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MembershipProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Public Membership',
                'verbose_name_plural': 'Public Memberships',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('communities.membership',),
        ),
    ]
