# Generated by Django 4.1.2 on 2022-10-19 18:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ballot",
            fields=[
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_calculated",
                    models.BooleanField(
                        default=False,
                        help_text="False by default, or when manually cast - True, if calculated by the system.",
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        default=True,
                        help_text="Defaults to Membership.is_anonymous_by_default",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        help_text="Any additional context the voter might like to share behind their vote."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Choice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "score",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Average number of Stars",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "runoff_score",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Average number of Stars",
                        max_digits=5,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
            ],
            options={
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="Referendum",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "dt_close",
                    models.DateTimeField(
                        help_text="DateTime this Referendum closes, no longer tallied, and no longer allowing votes."
                    ),
                ),
                (
                    "results_need_updating",
                    models.BooleanField(
                        default=True,
                        help_text="The Referendum was just published, or someone voted, and tally() needs to run.",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="referendums",
                        to="communities.community",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                (
                    "ballot_inheritance_tree",
                    models.TextField(
                        help_text="TODO: JSON snapshot of the ballot inheritance"
                    ),
                ),
                (
                    "choice_scores",
                    models.TextField(
                        help_text="Not sure how to store this, but need array of choices ordered by and including scores"
                    ),
                ),
                (
                    "choice_runoff",
                    models.TextField(
                        help_text="Not sure how to store this, but need array of choices ordered by and including their runoff scores"
                    ),
                ),
                (
                    "report",
                    models.TextField(
                        help_text="User-friendly presentation of all of the above."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stars",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Score Then Automatic Runoff",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "ballot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="votes",
                        to="communities.ballot",
                    ),
                ),
                (
                    "choice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="votes",
                        to="communities.choice",
                    ),
                ),
            ],
            options={
                "ordering": ["choice"],
            },
        ),
        migrations.CreateModel(
            name="UUIDTaggedItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.UUIDField(db_index=True, verbose_name="object ID"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tagged_items",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
            },
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                ("report", models.TextField()),
                ("stats", models.JSONField()),
                (
                    "referendum",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="results",
                        to="communities.referendum",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dt_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="DateTime this record was created."
                    ),
                ),
                (
                    "dt_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime this record last updated.",
                    ),
                ),
                (
                    "is_anonymous_by_default",
                    models.BooleanField(
                        default=True,
                        help_text="Members' ballots are anonymous by default.",
                    ),
                ),
                (
                    "is_community_manager",
                    models.BooleanField(
                        default=False, help_text="Can manage Community membership."
                    ),
                ),
                (
                    "is_voting_community_member",
                    models.BooleanField(
                        default=False, help_text="Can vote (not just a lobbyist.)"
                    ),
                ),
                (
                    "dt_joined",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="DateTime member joined this community",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="memberships",
                        to="communities.community",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="community",
            name="members",
            field=models.ManyToManyField(
                through="communities.Membership", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="choice",
            name="referendum",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="choices",
                to="communities.referendum",
            ),
        ),
        migrations.AddField(
            model_name="ballot",
            name="referendum",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="ballots",
                to="communities.referendum",
            ),
        ),
        migrations.AddField(
            model_name="ballot",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A comma-separated list of tags.",
                through="communities.UUIDTaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="ballot",
            name="voter",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="ballots",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
